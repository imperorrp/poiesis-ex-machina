---
interface Props {
  title: string;
  image?: string;
}

const {
  title = "Home"} = Astro.props;
import { ViewTransitions } from "astro:transitions";
import "./layout.css";
import SideMenu from "../components/Side/SideMenu.astro";
import { Toaster } from "../components/ui/sonner.tsx";
// Example: Ensure ThemeProvider is wrapping the whole app
import { ThemeProvider } from "next-themes";

import '../styles/global.css';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="AI Poetry Generator By Eristics Archetype"
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | Poiesis Ex Machina</title>
    <ViewTransitions fallback="none" />
  </head>
  <body class="dark">
    <ThemeProvider client:load>
      <div class="relative h-screen p-2 gap-2 flex items-stretch">
        <div class="w-[300px] flex-col hidden lg:flex overflow-y-auto">
          <SideMenu title={title}/>
        </div>
        <div class="rounded-lg bg-zinc-900 flex-1 mx-auto overflow-y-auto">
          <slot />
        </div>
      </div>
      <div
        id="not-support"
        class="fixed hidden bg-red-700 bottom-0 inset-x-0 rounded-t-md text-center py-2 lg:py-4 z-50 font-semibold"
      >
        It seems your browser does not support view transitions yet :( try it
        using chrome or edge <a
          class="underline"
          href="#"
          >(see docs here)</a
        >
      </div>
      <script is:inline defer>
        const defaultColor = "#134e4a";

        function initializeHoverEffects(){
          function setContainerColor(dataColor) {
            const playlistContainer = document.getElementById("playlist-container");
            const currentColor = playlistContainer?.getAttribute("data-color");
            if (dataColor && dataColor !== currentColor) {
              playlistContainer?.style.setProperty("--context-color", dataColor);
              playlistContainer?.setAttribute("data-color", dataColor);
            }
          }

          window.coloradTimeout = null;
          //selecting side menu items
          const playlists = document.querySelectorAll(".sidemenu-item");
          for (const playlist of playlists) {
            playlist.addEventListener("mouseover", () =>
              onMouseOverColorad(playlist)
            );
            playlist.addEventListener("mouseout", onMouseOutColorad);
            playlist.addEventListener("focus", () => onMouseFocusColorad(playlist));
            playlist.addEventListener("blur", onMouseOutColorad);
          }
          console.log("Selected elements:", playlists);

          //selecting main page container
          const playlist_cont = document.getElementById("playlist-container");
          playlist_cont.addEventListener("mouseover", () =>
            onMouseOverColorContainer(playlist_cont)
          );
          //playlist_cont.addEventListener("focus", () => onMouseFocusColorad(playlist_cont));
          console.log("Playlist container:", playlist_cont);

          function onMouseFocusColorad(el) {
            if (el) {
              const dataColor = el.getAttribute("data-color");
              if (!dataColor) return;
              setContainerColor(dataColor);
            }
          }
          function onMouseOverColorad(el) {
            if (el) {
              const dataColor = el.getAttribute("data-color");
              if (!dataColor) return;
              window.coloradTimeout = setTimeout(
                () => setContainerColor(dataColor),
                200
              );
            }
          }
          function onMouseOverColorContainer(el) {
            if (el) {
              const dataColor = el.getAttribute("data-color");
              if (!dataColor) return;
              window.coloradTimeout = setTimeout(
                () => setContainerColor(defaultColor),
                200
              );
            }
          }
          function onMouseOutColorad() {
            if (window.coloradTimeout) {
              clearTimeout(window.coloradTimeout);
              window.coloradTimeout = null;
            }
          }
        }

        initializeHoverEffects();

        document.addEventListener("astro:page-load", () => {
          initializeHoverEffects();
        });
      </script>
      <script>
        if (!document.startViewTransition) {
          document.getElementById("not-support").classList.remove("hidden");
        }
        document.addEventListener("astro:page-load", () => {
          for (const el of document.querySelectorAll(".el-to-fade")) {
            el.classList.remove("scale-90");
          }
        });
      </script>
    </ThemeProvider>
  </body>
</html>

<style is:global>
  @import '../styles/global.css';
</style>
